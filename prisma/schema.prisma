generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  reviews   Review[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id               String             @id @default(cuid())
  name             String
  description      String?
  price            Float
  comparePrice     Float?
  sku              String?            @unique
  inventory        Int                @default(0)
  weight           Float?
  dimensions       String?
  isActive         Boolean            @default(true)
  isFeatured       Boolean            @default(false)
  images           String?
  slug             String             @unique
  categoryId       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  discountProducts DiscountProduct[]
  inventoryLogs    InventoryLog[]
  orderItems       OrderItem[]
  category         Category?          @relation(fields: [categoryId], references: [id])
  variations       ProductVariation[]
  reviews          Review[]
}

model ProductVariation {
  id            String         @id @default(cuid())
  productId     String
  name          String
  value         String
  price         Float?
  sku           String?
  inventory     Int            @default(0)
  weight        Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  inventoryLogs InventoryLog[]
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  userId          String
  status          OrderStatus    @default(PENDING)
  subtotal        Float
  tax             Float          @default(0)
  shipping        Float          @default(0)
  discountAmount  Float          @default(0)
  total           Float
  billingAddress  String?
  shippingAddress String?
  notes           String?
  discountId      String?
  paymentMethodId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  discount        Discount?      @relation(fields: [discountId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Discount {
  id               String            @id @default(cuid())
  code             String            @unique
  name             String
  description      String?
  type             DiscountType
  value            Float
  minAmount        Float?
  maxUses          Int?
  usedCount        Int               @default(0)
  startsAt         DateTime?
  expiresAt        DateTime?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  discountProducts DiscountProduct[]
  orders           Order[]
}

model DiscountProduct {
  id         String   @id @default(cuid())
  discountId String
  productId  String
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@unique([discountId, productId])
}

model PaymentMethod {
  id        String            @id @default(cuid())
  name      String
  type      PaymentMethodType
  isActive  Boolean           @default(true)
  config    String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  orders    Order[]
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(cuid())
  type      String
  data      String
  createdAt DateTime @default(now())
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String
}

model InventoryLog {
  id          String            @id @default(cuid())
  productId   String
  variationId String?
  type        String
  quantity    Int
  reason      String?
  notes       String?
  createdAt   DateTime          @default(now())
  variation   ProductVariation? @relation(fields: [variationId], references: [id])
  product     Product           @relation(fields: [productId], references: [id])
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum PaymentMethodType {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CRYPTO
  CASH_ON_DELIVERY
}
